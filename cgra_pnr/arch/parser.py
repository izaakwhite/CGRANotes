from __future__ import print_function


# parse the ones generated by word2vec
def parse_emb(filename, filter_hyperedge=True):
    with open(filename) as f:
        lines = f.readlines()
    lines = lines[2:]
    input_data = {}
    num_dim = 0
    for line in lines:
        raw_data = line.split()
        if num_dim == 0:
            num_dim = len(raw_data) - 1
        else:
            assert(len(raw_data) == num_dim + 1)
        net_id = raw_data[0]
        if filter_hyperedge and net_id[0] == "e":
            continue
        inputs = [float(x) for x in raw_data[1:]]
        input_data[net_id] = inputs
    return num_dim, input_data


def parse_routing(filename):
    with open(filename) as f:
        lines = f.readlines()

    routes = {}
    line_index = 0
    while line_index < len(lines):
        line = lines[line_index].strip()
        line_index += 1
        if line[:3] == "Net":
            tokens = line.split(" ")
            net_id = tokens[2]
            routes[net_id] = []
            num_seg = int(tokens[-1])
            for seg_index in range(num_seg):
                segment = []
                line = lines[line_index].strip()
                line_index += 1
                assert line[:len("Segment")] == "Segment"
                tokens = line.split()
                seg_size = int(tokens[-1])
                for i in range(seg_size):
                    line = lines[line_index].strip()
                    line_index += 1
                    line = "".join([x for x in line if x not in ",()"])
                    tokens = line.split()
                    tokens = [int(x) if x.isdigit() else x for x in tokens]
                    segment.append(tokens)
                routes[net_id].append(segment)
    return routes
