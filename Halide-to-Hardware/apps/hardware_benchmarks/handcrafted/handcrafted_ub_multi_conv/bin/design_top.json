{"top":"global.DesignTop",
"namespaces":{
  "global":{
    "modules":{
      "DesignTop":{
        "type":["Record",[
          ["clk",["Named","coreir.clkIn"]],
          ["in_arg_0_0_0",["Array",16,"BitIn"]],
          ["in_en","BitIn"],
          ["out_0_0",["Array",16,"Bit"]],
          ["reset","BitIn"],
          ["valid","Bit"]
        ]],
        "instances":{
          "ub_weight":{
            "genref":"commonlib.unified_buffer",
            "genargs":{"width":["Int",16], "depth":["Int",0], "rate_matched":["Bool",false], "stencil_width":["Int",0], "iter_cnt":["Int",9216], "dimensionality":["Int",2], "stride_0":["Int",1], "range_0":["Int",9], "stride_1":["Int",0], "range_1":["Int",1024], "stride_2":["Int",0], "range_2":["Int",0], "chain_en":["Bool",false], "chain_idx":["Int",0], "starting_addr":["Int",0], "init":["Json",{"init":[11,14,17,12,0,18,13,16,19]}]}
          },
          "ub_weight_flush":{
            "modref":"corebit.const",
            "modargs":{"value":["Bool",false]}
          },
          "ub_weight_datain":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",16]},
            "modargs":{"value":[["BitVector",16],"16'h0000"]}
          },
          "ub_input":{
            "genref":"commonlib.unified_buffer",
            "genargs":{"width":["Int",16], "depth":["Int",256], "rate_matched":["Bool",false], "stencil_width":["Int",0], "iter_cnt":["Int",1764], "dimensionality":["Int",4], "stride_0":["Int",1], "range_0":["Int",3], "stride_1":["Int",16], "range_1":["Int",3], "stride_2":["Int",1], "range_2":["Int",14], "stride_3":["Int",16], "range_3":["Int",14], "chain_en":["Bool",false], "chain_idx":["Int",0], "starting_addr":["Int",0], "init":["Json",{"init":[0]}]}
          },
          "ub_input_flush":{
            "modref":"corebit.const",
            "modargs":{"value":["Bool",false]}
          },
          "multiply":{
            "genref":"coreir.mul",
            "genargs":{"width":["Int",16]}
          },
          "add_out_accum":{
            "genref":"coreir.add",
            "genargs":{"width":["Int",16]}
          },
          "output_reg":{
            "genref":"coreir.reg",
            "genargs":{"width":["Int",16]},
            "modargs":{"clk_posedge":["Bool",true], "init":[["BitVector",16],"16'hxxxx"]}
          },
          "output_fsm":{
            "genref":"commonlib.counter",
            "genargs":{"width":["Int",16], "min":["Int",0], "max":["Int",8], "inc":["Int",1]}
          },
          "init_phase_value":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",16]},
            "modargs":{"value":[["BitVector",16],"16'h0000"]}
          },
          "output_dataout_mux":{
            "genref":"coreir.mux",
            "genargs":{"width":["Int",16]}
          },
          "init_phase_selector":{
            "genref":"coreir.neq",
            "genargs":{"width":["Int",16]}
          },
          "output_valid_mux":{
            "modref":"corebit.mux"
          },
          "output_delay_reg":{
              "modref":"corebit.reg"
          },
          "output_delay_enmux":{
            "modref":"corebit.mux"
          },
          "invalid_bit":{
            "modref":"corebit.const",
            "modargs":{"value":["Bool",false]}
          },
          "output_bias":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",16]},
            "modargs":{"value":[["BitVector",16],"16'h0000"]}
          }
        },
        "connections":[
            ["self.in_arg_0_0_0","ub_input.datain"],
            ["ub_weight_datain.out","ub_weight.datain"],
            ["ub_input_flush.out","ub_input.flush"],
            ["ub_weight_flush.out","ub_weight.flush"],
            ["self.in_en","ub_input.wen"],
            ["self.in_en","ub_input.ren"],
            ["ub_input.valid","ub_weight.wen"],
            ["ub_input.valid","ub_weight.ren"],
            ["multiply.in0","ub_weight.dataout"],
            ["multiply.in1","ub_input.dataout"],
            ["add_out_accum.in0","multiply.out"],
            ["add_out_accum.in1","output_dataout_mux.out"],
            ["add_out_accum.out","output_reg.in"],
            ["output_bias.out","output_dataout_mux.in0"],
            ["output_reg.out","output_dataout_mux.in1"],
            ["output_fsm.out","init_phase_selector.in0"],
            ["init_phase_value.out","init_phase_selector.in1"],
            ["output_dataout_mux.sel","init_phase_selector.out"],
            ["output_fsm.reset","self.reset"],
            ["ub_input.valid","output_fsm.en"],
            ["output_reg.out","self.out_0_0"],
            ["invalid_bit.out","output_valid_mux.in1"],
            ["output_delay_reg.out","output_valid_mux.in0"],
            ["output_valid_mux.sel","init_phase_selector.out"],
            ["output_delay_reg.in","output_delay_enmux.out"],
            ["output_delay_reg.out","output_delay_enmux.in0"],
            ["ub_input.valid","output_delay_enmux.in1"],
            ["init_phase_selector.out","output_delay_enmux.sel"],
            ["output_valid_mux.out","self.valid"]
        ]
      }
    }
  }
}
}
