// 2x2 conv
blur0(x, y) = kernel(0,0) * ha_in(2*x,2*y) + kernel(1,0) * hw_in(2*x+1,2*y) + kernel(0,1) * hw_in(2*x,2*y+1) + kernel(1,1) * hw_in(2*x+1,2*y+1);
blur1(x, y) = kernel(0,0) * blur0(2*x,2*y) + kernel(1,0) * blur0(2*x+1,2*y) + kernel(0,1) * blur0(2*x,2*y+1) + kernel(1,1) * blur0(2*x+1,2*y+1);
blur2(x, y) = kernel(0,0) * blur1(2*x,2*y) + kernel(1,0) * blur1(2*x+1,2*y) + kernel(0,1) * blur1(2*x,2*y+1) + kernel(1,1) * blur1(2*x+1,2*y+1);
blur3(x, y) = kernel(0,0) * blur2(2*x,2*y) + kernel(1,0) * blur2(2*x+1,2*y) + kernel(0,1) * blur2(2*x,2*y+1) + kernel(1,1) * blur2(2*x+1,2*y+1);

blur3.compute_at(hw_output, xo);
blur3.compute_share_root(blur3, Var::outermost()); // distinct iteration loops

blur2.compute_share(blur3);
blur1.compute_share(blur3);
blur0.compute_share(blur3);



// Halide IR with compute share done block

realize hw_in_global_wrapper.stencil([0, 64], [0, 64]) {
  produce hw_in_global_wrapper.stencil {
    for (hw_in_global_wrapper.s0.y, 0, 64) {
      for (hw_in_global_wrapper.s0.x, 0, 64) {
        hw_in_global_wrapper.stencil(hw_in_global_wrapper.s0.x, hw_in_global_wrapper.s0.y) = hw_in.stencil(hw_in_global_wrapper.s0.x, hw_in_global_wrapper.s0.y)
      }
    }
  }
  consume hw_in_global_wrapper.stencil {
    realize blur3$1.stencil([0, 4], [0, 4]) if (uint1)0 {
      consume blur3$1.stencil {
        realize share_output.stencil([0, 4]) {
          realize share_input3.stencil([0, 4]) {
            realize share_input2.stencil([0, 4]) {
              realize share_input1.stencil([0, 4]) {
                realize share_input0.stencil([0, 4]) {
                  realize blur2$1.stencil([0, 8], [0, 8]) {
                    realize blur1$1.stencil([0, 16], [0, 16]) {
                      realize blur0$1.stencil([0, 32], [0, 32]) {
                        for (index, 0, 4) {
                          let t142 = (index == 0)
                          let t143 = (index == 1)
                          let t144 = (index == 2)
                          let t138 = select(t142, 32, select(t143, 16, select(t144, 8, 4)))
                          for (shared.y, 0, t138) {
                            let t147 = (shared.y*2)
                            for (shared.x, 0, t138) {
                              share_input0.stencil(index) = select(t142, hw_in_global_wrapper.stencil((shared.x*2), t147), select(t143, blur0$1.stencil((shared.x*2), t147), select(t144, blur1$1.stencil((shared.x*2), t147), blur2$1.stencil((shared.x*2), t147))))
                              share_input1.stencil(index) = select(t142, hw_in_global_wrapper.stencil(((shared.x*2) + 1), t147), select(t143, blur0$1.stencil(((shared.x*2) + 1), t147), select(t144, blur1$1.stencil(((shared.x*2) + 1), t147), blur2$1.stencil(((shared.x*2) + 1), t147))))
                              share_input2.stencil(index) = select(t142, hw_in_global_wrapper.stencil((shared.x*2), (t147 + 1)), select(t143, blur0$1.stencil((shared.x*2), (t147 + 1)), select(t144, blur1$1.stencil((shared.x*2), (t147 + 1)), blur2$1.stencil((shared.x*2), (t147 + 1)))))
                              share_input3.stencil(index) = select(t142, hw_in_global_wrapper.stencil(((shared.x*2) + 1), (t147 + 1)), select(t143, blur0$1.stencil(((shared.x*2) + 1), (t147 + 1)), select(t144, blur1$1.stencil(((shared.x*2) + 1), (t147 + 1)), blur2$1.stencil(((shared.x*2) + 1), (t147 + 1)))))
                              share_output.stencil(index) = ((share_input1.stencil(index)*(uint16)63) + ((share_input0.stencil(index)*(uint16)50) + ((share_input3.stencil(index)*(uint16)78) + (share_input2.stencil(index)*(uint16)63))))
                              if (t142) {
                                blur0$1.stencil(shared.x, shared.y) = share_output.stencil(0)
                              } else if (t143) {
                                blur1$1.stencil(shared.x, shared.y) = share_output.stencil(1)
                              } else if (t144) {
                                blur2$1.stencil(shared.x, shared.y) = share_output.stencil(2)
                              } else {
                                blur3$1.stencil(shared.x, shared.y) = share_output.stencil(index)
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


// current clockwork output
prog pyramid_blur() {
  prog prg;
  prg.compute_unit_file = "pyramid_blur_compute.h";
  prg.name = "pyramid_blur";

// Stencil<uint16_t, 64, 64> &hw_in_stencil = arg_0;
  prg.add_input("hw_in_stencil");
  prg.buffer_port_widths["hw_in_stencil"] = 16;
// Stencil<uint16_t, 4, 4> &hw_output_stencil = arg_1;
  prg.add_output("hw_output_stencil");
  prg.buffer_port_widths["hw_output_stencil"] = 16;

////producing hw_in_global_wrapper.stencil
  auto hw_in_global_wrapper_s0_y = prg.add_loop("hw_in_global_wrapper_s0_y", 0, 64);
  auto hw_in_global_wrapper_s0_x = hw_in_global_wrapper_s0_y->add_loop("hw_in_global_wrapper_s0_x", 0, 64);

//store is: hw_in_global_wrapper.stencil(hw_in_global_wrapper_s0_x, hw_in_global_wrapper_s0_y) = hw_in.stencil(hw_in_global_wrapper_s0_x, hw_in_global_wrapper_s0_y)
  auto hcompute_hw_in_global_wrapper_stencil = hw_in_global_wrapper_s0_x->add_op("op_hcompute_hw_in_global_wrapper_stencil");
  hcompute_hw_in_global_wrapper_stencil->add_function("hcompute_hw_in_global_wrapper_stencil");
  hcompute_hw_in_global_wrapper_stencil->add_load("hw_in_stencil", "hw_in_global_wrapper_s0_y", "hw_in_global_wrapper_s0_x");
  prg.buffer_port_widths["hw_in_global_wrapper_stencil"] = 16;
  hcompute_hw_in_global_wrapper_stencil->add_store("hw_in_global_wrapper_stencil", "hw_in_global_wrapper_s0_y", "hw_in_global_wrapper_s0_x");

//consuming hw_in_global_wrapper.stencil

//consuming blur3$1.stencil
  auto index = prg.add_loop("index", 0, 4);
  auto shared_y = index->add_loop("shared_y", 0, select((index == 0), 32, select((index == 1), 16, select((index == 2), 8, 4)))); // note the loop extent that changes based on index
  auto shared_x = shared_y->add_loop("shared_x", 0, select((index == 0), 32, select((index == 1), 16, select((index == 2), 8, 4))));

//store is: share_input0.stencil(index) = select((index == 0), hw_in_global_wrapper.stencil((shared_x*2), (shared_y*2)), select((index == 1), blur0$1.stencil((shared_x*2), (shared_y*2)), select((index == 2), blur1$1.stencil((shared_x*2), (shared_y*2)), blur2$1.stencil((shared_x*2), (shared_y*2)))))
  auto hcompute_share_input0_stencil = shared_x->add_op("op_hcompute_share_input0_stencil");
  hcompute_share_input0_stencil->add_function("hcompute_share_input0_stencil");
  prg.buffer_port_widths["blur0_1_stencil"] = 16;
  hcompute_share_input0_stencil->add_load("blur0_1_stencil", "(shared_y*2)", "(shared_x*2)");
  prg.buffer_port_widths["blur1_1_stencil"] = 16;
  hcompute_share_input0_stencil->add_load("blur1_1_stencil", "(shared_y*2)", "(shared_x*2)");
  prg.buffer_port_widths["blur2_1_stencil"] = 16;
  hcompute_share_input0_stencil->add_load("blur2_1_stencil", "(shared_y*2)", "(shared_x*2)");
  hcompute_share_input0_stencil->add_load("hw_in_global_wrapper_stencil", "(shared_y*2)", "(shared_x*2)");
  prg.buffer_port_widths["share_input0_stencil"] = 16;
  hcompute_share_input0_stencil->add_store("share_input0_stencil", "index");
  hcompute_share_input0_stencil->compute_unit_needs_index_variable("index");

//store is: share_input1.stencil(index) = select((index == 0), hw_in_global_wrapper.stencil(((shared_x*2) + 1), (shared_y*2)), select((index == 1), blur0$1.stencil(((shared_x*2) + 1), (shared_y*2)), select((index == 2), blur1$1.stencil(((shared_x*2) + 1), (shared_y*2)), blur2$1.stencil(((shared_x*2) + 1), (shared_y*2)))))
  auto hcompute_share_input1_stencil = shared_x->add_op("op_hcompute_share_input1_stencil");
  hcompute_share_input1_stencil->add_function("hcompute_share_input1_stencil");
  hcompute_share_input1_stencil->add_load("blur0_1_stencil", "(shared_y*2)", "((shared_x*2) + 1)");
  hcompute_share_input1_stencil->add_load("blur1_1_stencil", "(shared_y*2)", "((shared_x*2) + 1)");
  hcompute_share_input1_stencil->add_load("blur2_1_stencil", "(shared_y*2)", "((shared_x*2) + 1)");
  hcompute_share_input1_stencil->add_load("hw_in_global_wrapper_stencil", "(shared_y*2)", "((shared_x*2) + 1)");
  prg.buffer_port_widths["share_input1_stencil"] = 16;
  hcompute_share_input1_stencil->add_store("share_input1_stencil", "index");
  hcompute_share_input1_stencil->compute_unit_needs_index_variable("index");

//store is: share_input2.stencil(index) = select((index == 0), hw_in_global_wrapper.stencil((shared_x*2), ((shared_y*2) + 1)), select((index == 1), blur0$1.stencil((shared_x*2), ((shared_y*2) + 1)), select((index == 2), blur1$1.stencil((shared_x*2), ((shared_y*2) + 1)), blur2$1.stencil((shared_x*2), ((shared_y*2) + 1)))))
  auto hcompute_share_input2_stencil = shared_x->add_op("op_hcompute_share_input2_stencil");
  hcompute_share_input2_stencil->add_function("hcompute_share_input2_stencil");
  hcompute_share_input2_stencil->add_load("blur0_1_stencil", "((shared_y*2) + 1)", "(shared_x*2)");
  hcompute_share_input2_stencil->add_load("blur1_1_stencil", "((shared_y*2) + 1)", "(shared_x*2)");
  hcompute_share_input2_stencil->add_load("blur2_1_stencil", "((shared_y*2) + 1)", "(shared_x*2)");
  hcompute_share_input2_stencil->add_load("hw_in_global_wrapper_stencil", "((shared_y*2) + 1)", "(shared_x*2)");
  prg.buffer_port_widths["share_input2_stencil"] = 16;
  hcompute_share_input2_stencil->add_store("share_input2_stencil", "index");
  hcompute_share_input2_stencil->compute_unit_needs_index_variable("index");

//store is: share_input3.stencil(index) = select((index == 0), hw_in_global_wrapper.stencil(((shared_x*2) + 1), ((shared_y*2) + 1)), select((index == 1), blur0$1.stencil(((shared_x*2) + 1), ((shared_y*2) + 1)), select((index == 2), blur1$1.stencil(((shared_x*2) + 1), ((shared_y*2) + 1)), blur2$1.stencil(((shared_x*2) + 1), ((shared_y*2) + 1)))))
  auto hcompute_share_input3_stencil = shared_x->add_op("op_hcompute_share_input3_stencil");
  hcompute_share_input3_stencil->add_function("hcompute_share_input3_stencil");
  hcompute_share_input3_stencil->add_load("blur0_1_stencil", "((shared_y*2) + 1)", "((shared_x*2) + 1)");
  hcompute_share_input3_stencil->add_load("blur1_1_stencil", "((shared_y*2) + 1)", "((shared_x*2) + 1)");
  hcompute_share_input3_stencil->add_load("blur2_1_stencil", "((shared_y*2) + 1)", "((shared_x*2) + 1)");
  hcompute_share_input3_stencil->add_load("hw_in_global_wrapper_stencil", "((shared_y*2) + 1)", "((shared_x*2) + 1)");
  prg.buffer_port_widths["share_input3_stencil"] = 16;
  hcompute_share_input3_stencil->add_store("share_input3_stencil", "index");
  hcompute_share_input3_stencil->compute_unit_needs_index_variable("index");

//store is: share_output.stencil(index) = ((share_input1.stencil(index)*(uint16)63) + ((share_input0.stencil(index)*(uint16)50) + ((share_input3.stencil(index)*(uint16)78) + (share_input2.stencil(index)*(uint16)63))))
  auto hcompute_share_output_stencil = shared_x->add_op("op_hcompute_share_output_stencil");
  hcompute_share_output_stencil->add_function("hcompute_share_output_stencil");
  hcompute_share_output_stencil->add_load("share_input0_stencil", "index");
  hcompute_share_output_stencil->add_load("share_input1_stencil", "index");
  hcompute_share_output_stencil->add_load("share_input2_stencil", "index");
  hcompute_share_output_stencil->add_load("share_input3_stencil", "index");
  prg.buffer_port_widths["share_output_stencil"] = 16;
  hcompute_share_output_stencil->add_store("share_output_stencil", "index");

// these conditional stores have no if statements. The Halide codegen ignores the ifs for now.
//store is: blur0$1.stencil(shared_x, shared_y) = share_output.stencil(0)
  auto hcompute_blur0_1_stencil = shared_x->add_op("op_hcompute_blur0_1_stencil");
  hcompute_blur0_1_stencil->add_function("hcompute_blur0_1_stencil");
  hcompute_blur0_1_stencil->add_load("share_output_stencil", "0");
  hcompute_blur0_1_stencil->add_store("blur0_1_stencil", "shared_y", "shared_x");

//store is: blur1$1.stencil(shared_x, shared_y) = share_output.stencil(1)
  auto hcompute_blur1_1_stencil = shared_x->add_op("op_hcompute_blur1_1_stencil");
  hcompute_blur1_1_stencil->add_function("hcompute_blur1_1_stencil");
  hcompute_blur1_1_stencil->add_load("share_output_stencil", "1");
  hcompute_blur1_1_stencil->add_store("blur1_1_stencil", "shared_y", "shared_x");

//store is: blur2$1.stencil(shared_x, shared_y) = share_output.stencil(2)
  auto hcompute_blur2_1_stencil = shared_x->add_op("op_hcompute_blur2_1_stencil");
  hcompute_blur2_1_stencil->add_function("hcompute_blur2_1_stencil");
  hcompute_blur2_1_stencil->add_load("share_output_stencil", "2");
  hcompute_blur2_1_stencil->add_store("blur2_1_stencil", "shared_y", "shared_x");

//store is: blur3$1.stencil(shared_x, shared_y) = share_output.stencil(index)
  auto hcompute_blur3_1_stencil = shared_x->add_op("op_hcompute_blur3_1_stencil");
  hcompute_blur3_1_stencil->add_function("hcompute_blur3_1_stencil");
  hcompute_blur3_1_stencil->add_load("share_output_stencil", "index");
  prg.buffer_port_widths["blur3_1_stencil"] = 16;
  hcompute_blur3_1_stencil->add_store("blur3_1_stencil", "shared_y", "shared_x");

  return prg;
}
