// 2x2 conv
blur0(x, y) = kernel(0,0) * ha_in(2*x,2*y) + kernel(1,0) * hw_in(2*x+1,2*y) + kernel(0,1) * hw_in(2*x,2*y+1) + kernel(1,1) * hw_in(2*x+1,2*y+1);
blur1(x, y) = kernel(0,0) * blur0(2*x,2*y) + kernel(1,0) * blur0(2*x+1,2*y) + kernel(0,1) * blur0(2*x,2*y+1) + kernel(1,1) * blur0(2*x+1,2*y+1);
blur2(x, y) = kernel(0,0) * blur1(2*x,2*y) + kernel(1,0) * blur1(2*x+1,2*y) + kernel(0,1) * blur1(2*x,2*y+1) + kernel(1,1) * blur1(2*x+1,2*y+1);
blur3(x, y) = kernel(0,0) * blur2(2*x,2*y) + kernel(1,0) * blur2(2*x+1,2*y) + kernel(0,1) * blur2(2*x,2*y+1) + kernel(1,1) * blur2(2*x+1,2*y+1);


blur3.compute_at(hw_output, xo);
blur3.compute_share_root(blur3, y); // distinct iteration loops

blur2.compute_share(blur3);
blur1.compute_share(blur3);
blur0.compute_share(blur3);




consume hw_in_global_wrapper.stencil {
    realize blur3$1.stencil([0, 4], [0, 4]) {
      produce blur3$1.stencil {
        for (blur3$1.s0.y, 0, 4) {
          realize share_output.stencil([0, 4]) {
            realize share_input3.stencil([0, 4]) {
              realize share_input2.stencil([0, 4]) {
                realize share_input1.stencil([0, 4]) {
                  realize share_input0.stencil([0, 4]) {
                    realize blur2$1.stencil([0, 8], [(blur3$1.s0.y*2), 2]) {
                      realize blur1$1.stencil([0, 16], [(blur3$1.s0.y*4), 4]) {
                        realize blur0$1.stencil([0, 32], [(blur3$1.s0.y*8), 8]) {
                          for (index, 0, 4) {
                            let t155 = (index == 0)
                            let t156 = (index == 1)
                            let t157 = (index == 2)
                            let t149 = select(t155, (blur3$1.s0.y*8), select(t156, (blur3$1.s0.y*4), select(t157, (blur3$1.s0.y*2), blur3$1.s0.y)))
                            let t151 = select(t155, 32, select(t156, 16, select(t157, 8, 4)))
                            let t150 = select(t155, 8, select(t156, 4, select(t157, 2, 1)))
                            for (shared.y, t149, t150) {
                              let t160 = (shared.y*2)
                              for (shared.x, 0, t151) {
                                share_input0.stencil(index) = select(t155, hw_in_global_wrapper.stencil((shared.x*2), t160), select(t156, blur0$1.stencil((shared.x*2), t160), select(t157, blur1$1.stencil((shared.x*2), t160), blur2$1.stencil((shared.x*2), t160))))
                                share_input1.stencil(index) = select(t155, hw_in_global_wrapper.stencil(((shared.x*2) + 1), t160), select(t156, blur0$1.stencil(((shared.x*2) + 1), t160), select(t157, blur1$1.stencil(((shared.x*2) + 1), t160), blur2$1.stencil(((shared.x*2) + 1), t160))))
                                share_input2.stencil(index) = select(t155, hw_in_global_wrapper.stencil((shared.x*2), (t160 + 1)), select(t156, blur0$1.stencil((shared.x*2), (t160 + 1)), select(t157, blur1$1.stencil((shared.x*2), (t160 + 1)), blur2$1.stencil((shared.x*2), (t160 + 1)))))
                                share_input3.stencil(index) = select(t155, hw_in_global_wrapper.stencil(((shared.x*2) + 1), (t160 + 1)), select(t156, blur0$1.stencil(((shared.x*2) + 1), (t160 + 1)), select(t157, blur1$1.stencil(((shared.x*2) + 1), (t160 + 1)), blur2$1.stencil(((shared.x*2) + 1), (t160 + 1)))))
                                share_output.stencil(index) = ((share_input1.stencil(index)*(uint16)63) + ((share_input0.stencil(index)*(uint16)50) + ((share_input3.stencil(index)*(uint16)78) + (share_input2.stencil(index)*(uint16)63))))
                                if (t155) {
                                  blur0$1.stencil(shared.x, shared.y) = share_output.stencil(0)
                                } else if (t156) {
                                  blur1$1.stencil(shared.x, shared.y) = share_output.stencil(1)
                                } else if (t157) {
                                  blur2$1.stencil(shared.x, shared.y) = share_output.stencil(2)
                                } else {
                                  blur3$1.stencil(shared.x, shared.y) = share_output.stencil(index)
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      consume blur3$1.stencil {
        for (hw_output.s0.y.yi, 0, 4) {
          for (hw_output.s0.x.xi, 0, 4) {
            hw_output.stencil(hw_output.s0.x.xi, hw_output.s0.y.yi) = blur3$1.stencil(hw_output.s0.x.xi, hw_output.s0.y.yi)
          }
        }
      }
    }
  }
}
